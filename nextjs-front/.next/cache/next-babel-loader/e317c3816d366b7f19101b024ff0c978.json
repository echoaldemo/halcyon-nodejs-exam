{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      var newTodo = {\n        task: action.payload\n      };\n      var append = [].concat(_toConsumableArray(state.tasks), [newTodo]);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: append\n      });\n    // case \"DONE_TODO\":\n    //   const status = action.payload.status === \"not done\" ? \"done\" : \"not done\";\n    //   const temp = [...state.tasks].map((item) => {\n    //     if (item.id === action.payload.id) {\n    //       return { ...action.payload, status };\n    //     } else return item;\n    //   });\n    //   const appendDone = [...temp];\n    //   return {\n    //     ...state,\n    //     tasks: appendDone,\n    //   };\n    // case \"INITIAL_STATE\":\n    //   return {\n    //     ...state,\n    //     tasks: action.payload,\n    //   };\n  }\n}","map":{"version":3,"sources":["C:/Users/Echo/Documents/HALCYON/reducer/Reducer.js"],"names":["reducer","state","action","type","newTodo","task","payload","append","tasks"],"mappings":";;;;;;;AAAA,eAAe,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,UAAMC,OAAO,GAAG;AACdC,QAAAA,IAAI,EAAEH,MAAM,CAACI;AADC,OAAhB;AAGA,UAAMC,MAAM,gCAAON,KAAK,CAACO,KAAb,IAAoBJ,OAApB,EAAZ;AACA,6CACKH,KADL;AAEEO,QAAAA,KAAK,EAAED;AAFT;AAIF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BF;AA4BD","sourcesContent":["export default function reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      const newTodo = {\r\n        task: action.payload,\r\n      };\r\n      const append = [...state.tasks, newTodo];\r\n      return {\r\n        ...state,\r\n        tasks: append,\r\n      };\r\n    // case \"DONE_TODO\":\r\n    //   const status = action.payload.status === \"not done\" ? \"done\" : \"not done\";\r\n    //   const temp = [...state.tasks].map((item) => {\r\n    //     if (item.id === action.payload.id) {\r\n    //       return { ...action.payload, status };\r\n    //     } else return item;\r\n    //   });\r\n    //   const appendDone = [...temp];\r\n    //   return {\r\n    //     ...state,\r\n    //     tasks: appendDone,\r\n    //   };\r\n    // case \"INITIAL_STATE\":\r\n    //   return {\r\n    //     ...state,\r\n    //     tasks: action.payload,\r\n    //   };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}