{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { post, put } from \"../utils/utils\";\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case \"INITIAL_STATE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: action.payload\n      });\n\n    case \"ADD_TODO\":\n      const newTodo = {\n        task_name: action.payload.task_name,\n        task_status: action.payload.task_status\n      };\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: [...state.tasks, action.payload.id]\n      });\n\n    case \"DONE_TODO\":\n      const temp = [...state.tasks].map(item => {\n        if (item.id === action.payload.id) {\n          return _objectSpread(_objectSpread({}, action.payload), {}, {\n            task_status: !action.payload.task_status\n          });\n        } else return item;\n      });\n      const edited = temp.filter(task => task.id === action.payload.id);\n      put(`/task/${action.payload.id}`, _objectSpread({}, edited[0])).then(resp => console.log(resp));\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: [...temp]\n      });\n  }\n}","map":{"version":3,"sources":["C:/Users/Echo/Documents/HALCYON/reducer/Reducer.js"],"names":["post","put","reducer","state","action","type","tasks","payload","newTodo","task_name","task_status","id","temp","map","item","edited","filter","task","then","resp","console","log"],"mappings":";;;;;;AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,gBAA1B;AACA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,KAAK,EAAEF,MAAM,CAACG;AAFhB;;AAIF,SAAK,UAAL;AACE,YAAMC,OAAO,GAAG;AACdC,QAAAA,SAAS,EAAEL,MAAM,CAACG,OAAP,CAAeE,SADZ;AAEdC,QAAAA,WAAW,EAAEN,MAAM,CAACG,OAAP,CAAeG;AAFd,OAAhB;AAIA,6CACKP,KADL;AAEEG,QAAAA,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAiBF,MAAM,CAACG,OAAP,CAAeI,EAAhC;AAFT;;AAIF,SAAK,WAAL;AACE,YAAMC,IAAI,GAAG,CAAC,GAAGT,KAAK,CAACG,KAAV,EAAiBO,GAAjB,CAAsBC,IAAD,IAAU;AAC1C,YAAIA,IAAI,CAACH,EAAL,KAAYP,MAAM,CAACG,OAAP,CAAeI,EAA/B,EAAmC;AACjC,iDACKP,MAAM,CAACG,OADZ;AAEEG,YAAAA,WAAW,EAAE,CAACN,MAAM,CAACG,OAAP,CAAeG;AAF/B;AAID,SALD,MAKO,OAAOI,IAAP;AACR,OAPY,CAAb;AAQA,YAAMC,MAAM,GAAGH,IAAI,CAACI,MAAL,CAAaC,IAAD,IAAUA,IAAI,CAACN,EAAL,KAAYP,MAAM,CAACG,OAAP,CAAeI,EAAjD,CAAf;AACAV,MAAAA,GAAG,CAAE,SAAQG,MAAM,CAACG,OAAP,CAAeI,EAAG,EAA5B,oBAAoCI,MAAM,CAAC,CAAD,CAA1C,EAAH,CAAoDG,IAApD,CAA0DC,IAAD,IACvDC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CADF;AAGA,6CACKhB,KADL;AAEEG,QAAAA,KAAK,EAAE,CAAC,GAAGM,IAAJ;AAFT;AA5BJ;AAiCD","sourcesContent":["import { post, put } from \"../utils/utils\";\r\nexport default function reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"INITIAL_STATE\":\r\n      return {\r\n        ...state,\r\n        tasks: action.payload,\r\n      };\r\n    case \"ADD_TODO\":\r\n      const newTodo = {\r\n        task_name: action.payload.task_name,\r\n        task_status: action.payload.task_status,\r\n      };\r\n      return {\r\n        ...state,\r\n        tasks: [...state.tasks, action.payload.id],\r\n      };\r\n    case \"DONE_TODO\":\r\n      const temp = [...state.tasks].map((item) => {\r\n        if (item.id === action.payload.id) {\r\n          return {\r\n            ...action.payload,\r\n            task_status: !action.payload.task_status,\r\n          };\r\n        } else return item;\r\n      });\r\n      const edited = temp.filter((task) => task.id === action.payload.id);\r\n      put(`/task/${action.payload.id}`, { ...edited[0] }).then((resp) =>\r\n        console.log(resp)\r\n      );\r\n      return {\r\n        ...state,\r\n        tasks: [...temp],\r\n      };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}