{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { post, put } from \"../utils/utils\";\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case \"INITIAL_STATE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: action.payload\n      });\n\n    case \"ADD_TODO\":\n      var newTodo = {\n        task_name: action.payload,\n        task_status: false\n      };\n      post(\"/tasks\", newTodo).then(function (res) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          tasks: [].concat(_toConsumableArray(state.tasks), [res.data])\n        });\n      });\n\n    case \"DONE_TODO\":\n      console.log(\"HELLOOOOOOOOOO\");\n\n      var temp = _toConsumableArray(state.tasks).map(function (item) {\n        if (item.id === action.payload.id) {\n          return _objectSpread(_objectSpread({}, action.payload), {}, {\n            task_status: !action.payload.task_status\n          });\n        } else return item;\n      });\n\n      var edited = temp.filter(function (task) {\n        return task.id === action.payload.id;\n      });\n      put(\"/task/\".concat(action.payload.id), _objectSpread({}, edited[0])).then(function (resp) {\n        return console.log(resp);\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: _toConsumableArray(temp)\n      });\n  }\n}","map":{"version":3,"sources":["C:/Users/Echo/Documents/HALCYON/reducer/Reducer.js"],"names":["post","put","reducer","state","action","type","tasks","payload","newTodo","task_name","task_status","then","res","data","console","log","temp","map","item","id","edited","filter","task","resp"],"mappings":";;;;;;;AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,gBAA1B;AACA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,KAAK,EAAEF,MAAM,CAACG;AAFhB;;AAIF,SAAK,UAAL;AACE,UAAMC,OAAO,GAAG;AACdC,QAAAA,SAAS,EAAEL,MAAM,CAACG,OADJ;AAEdG,QAAAA,WAAW,EAAE;AAFC,OAAhB;AAIAV,MAAAA,IAAI,CAAC,QAAD,EAAWQ,OAAX,CAAJ,CAAwBG,IAAxB,CAA6B,UAACC,GAAD,EAAS;AACpC,+CACKT,KADL;AAEEG,UAAAA,KAAK,+BAAMH,KAAK,CAACG,KAAZ,IAAmBM,GAAG,CAACC,IAAvB;AAFP;AAID,OALD;;AAMF,SAAK,WAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACA,UAAMC,IAAI,GAAG,mBAAIb,KAAK,CAACG,KAAV,EAAiBW,GAAjB,CAAqB,UAACC,IAAD,EAAU;AAC1C,YAAIA,IAAI,CAACC,EAAL,KAAYf,MAAM,CAACG,OAAP,CAAeY,EAA/B,EAAmC;AACjC,iDACKf,MAAM,CAACG,OADZ;AAEEG,YAAAA,WAAW,EAAE,CAACN,MAAM,CAACG,OAAP,CAAeG;AAF/B;AAID,SALD,MAKO,OAAOQ,IAAP;AACR,OAPY,CAAb;;AAQA,UAAME,MAAM,GAAGJ,IAAI,CAACK,MAAL,CAAY,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACH,EAAL,KAAYf,MAAM,CAACG,OAAP,CAAeY,EAArC;AAAA,OAAZ,CAAf;AACAlB,MAAAA,GAAG,iBAAUG,MAAM,CAACG,OAAP,CAAeY,EAAzB,qBAAoCC,MAAM,CAAC,CAAD,CAA1C,EAAH,CAAoDT,IAApD,CAAyD,UAACY,IAAD;AAAA,eACvDT,OAAO,CAACC,GAAR,CAAYQ,IAAZ,CADuD;AAAA,OAAzD;AAGA,6CACKpB,KADL;AAEEG,QAAAA,KAAK,qBAAMU,IAAN;AAFP;AA/BJ;AAoCD","sourcesContent":["import { post, put } from \"../utils/utils\";\r\nexport default function reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"INITIAL_STATE\":\r\n      return {\r\n        ...state,\r\n        tasks: action.payload,\r\n      };\r\n    case \"ADD_TODO\":\r\n      const newTodo = {\r\n        task_name: action.payload,\r\n        task_status: false,\r\n      };\r\n      post(\"/tasks\", newTodo).then((res) => {\r\n        return {\r\n          ...state,\r\n          tasks: [...state.tasks, res.data],\r\n        };\r\n      });\r\n    case \"DONE_TODO\":\r\n      console.log(\"HELLOOOOOOOOOO\");\r\n      const temp = [...state.tasks].map((item) => {\r\n        if (item.id === action.payload.id) {\r\n          return {\r\n            ...action.payload,\r\n            task_status: !action.payload.task_status,\r\n          };\r\n        } else return item;\r\n      });\r\n      const edited = temp.filter((task) => task.id === action.payload.id);\r\n      put(`/task/${action.payload.id}`, { ...edited[0] }).then((resp) =>\r\n        console.log(resp)\r\n      );\r\n      return {\r\n        ...state,\r\n        tasks: [...temp],\r\n      };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}